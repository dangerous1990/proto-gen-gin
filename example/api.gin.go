// Code generated by protoc-gen-gin v0.1, DO NOT EDIT.
// source: api.proto

/*
Package api is a generated blademaster stub package.
This code was generated with dangerous1990/protoc-gen-ginGenerator v0.1.

package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

It is generated from these files:
	api.proto
*/
package api

import (
	"context"

	"github.com/gin-gonic/gin"
	"github.com/gin-gonic/gin/binding"
)

// to suppressed 'imported but not used warning'
var _ *gin.Context
var _ context.Context
var _ binding.StructValidator

var PathDemoSayHello = "/demo.service.v1.Demo/SayHello"
var PathDemoSayHelloURL = "/gin-demo/say_hello"

// DemoGinServer is the server API for Demo service.
type DemoGinServer interface {
	SayHello(ctx context.Context, req *HelloReq) (resp *google_protobuf1.Empty, err error)

	SayHelloURL(ctx context.Context, req *HelloReq) (resp *HelloResp, err error)
}

var DemoSvc DemoGinServer

func demoSayHello(c *gin.Context) {
	p := new(HelloReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	resp, err := DemoSvc.SayHello(c, p)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}
	c.JSON(http.StatusOK, resp)
}

func demoSayHelloURL(c *gin.Context) {
	p := new(HelloReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	resp, err := DemoSvc.SayHelloURL(c, p)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}
	c.JSON(http.StatusOK, resp)
}

// RegisterDemoGinServer Register the gin route
func RegisterDemoGinServer(e *gin.Engine, server DemoGinServer) {
	DemoSvc = server
	e.GET("/demo.service.v1.Demo/SayHello", demoSayHello)
	e.GET("/gin-demo/say_hello", demoSayHelloURL)
}
